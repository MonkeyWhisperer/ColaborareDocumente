@using ColaborareDocumente.Data
@implements IDisposable

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid" style="justify-content: center;">
        <a class="navbar-brand" href="">Colaborare în Cloud</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
    

        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Colaborare Documente
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Manage">
                        @* <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name *@
                        <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> Profilul meu
                    </NavLink>
                </div>
                @if (@context.User.IsInRole(ADMINISTRATION_ROLE))
                {
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="Utilizatori">
                            <span class="bi bi-people-fill-nav-menu" aria-hidden="true"></span> Utilizatori
                        </NavLink>
                    </div>
                }
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Deconectare
                        </button>
                    </form>
                </div>
            </Authorized>
            <NotAuthorized>
          @*       <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Register">
                        <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Inregistreazate
                    </NavLink>
                </div> *@
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Login">
                        <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Autentificare
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private string? currentUrl;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    string ADMINISTRATION_ROLE = "Administrator";
    System.Security.Claims.ClaimsPrincipal CurrentUser;

    // Property used to add or edit the currently selected user
    ApplicationUser objUser = new ApplicationUser();

    // Tracks the selected role for the currently selected user
    string CurrentUserRole { get; set; } = "Users";

    // Collection to display the existing users
    List<ApplicationUser> ColUsers = new List<ApplicationUser>();

    // Options to display in the roles dropdown when editing a user
    List<string> Options = new List<string>() { "Student", "Administrator" };

    // To hold any possible errors
    string strError = "";

    // To enable showing the Popup
    bool ShowPopup = false;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

